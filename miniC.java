/* Generated By:JavaCC: Do not edit this line. miniC.java */
import java.util.*;
import java.io.*;

public class miniC implements miniCConstants {

    private static Stack<pair> expStack = new Stack<pair>();
    private static Stack<Object> ss = new Stack<Object>();
    private static Stack<ScopeLevel> currentScope = new Stack<ScopeLevel>();
    private static Hashtable<String, String> strings = new Hashtable<String, String>();
    private static Hashtable<String, ArrayList<GenQuad>> functions = new Hashtable<String, ArrayList<GenQuad>>();
    private static String currentFunction;
    private static ArrayList<GenQuad> PB; /* La pile qui contient le code interm√©diaire */
    private static int quadC; /* Indice du quadruplet courant */

    public static int getCurrentAddr() {
        return Scope.getCurrentAddr();
    }

    public Hashtable<String, ArrayList<GenQuad>> getFunctions() {
        return functions;
    }

    public static String setString(String string) {
        String name = "STRING" + strings.size();

        StringBuilder value = new StringBuilder( "'" + string.substring(1,string.length() - 1) + "$'");

        int from = 0;
        while(value.indexOf("\\n",from) != -1)
        {
            from = value.indexOf("\\n",from);
            value.replace(from, from+"\\n".length(), "' , CR , LF , '");
            from++;
        }

        from = 0;
        while(value.indexOf("\\t",from) != -1)
        {
            from = value.indexOf("\\t",from);
            value.replace(from, from+"\\t".length(), "' , TAB , '");
            from++;
        }

        from = 0;
        while(value.indexOf("'' ,",from) != -1)
        {
            from = value.indexOf("'' ,",from);
            value.replace(from, from+"'' ,".length(), "");
            from++;
        }

        strings.put(name , value.toString());

        return name;
    }

    private static void defineFunction(String input) throws ParseException {
        if(functions.containsKey(input))
        {
            throw new ParseException("La fonction '" + input
                        + "' est d\u00c3\u00a9j\u00c3\u00a0 d\u00c3\u00a9finie.");
        }

        currentFunction = input;

        PB = new ArrayList<GenQuad>();
        quadC = 0;
        functions.put(input,PB);
    }

    static class GenQuad {

        private String part1 ,part2, part3;

        public GenQuad(Object part1, Object part2, Object part3) {
            super();

            if(part1 != null){
                this.part1 = "" + part1;
            }
            if(part2 != null){
                this.part2 = "" + part2;
            }
            if(part3 != null){
                this.part3 = "" + part3;
            }
        }

        public String getPart1() {
            return part1;
        }

        public void setPart1(String part1) {
            this.part1 = part1;
        }

        public String getPart2() {
            return part2;
        }

        public void setPart2(String part2) {
            this.part2 = part2;
        }

        public String getPart3() {
            return part3;
        }

        public void setPart3(String part3) {
            this.part3 = part3;
        }

        @Override
        public String toString() {
            StringBuilder output = new StringBuilder();

            if(part1 != null){
                output.append(part1);
            }
            if(part2 != null){
                output.append(" " + part2);
            }
            if(part3 != null){
                output.append(", " + part3);
            }

            return output.toString();
        }

    }

    static class ScopeLevel {
        private Stack<Scope> currentScope = new Stack<Scope>();

        public ScopeLevel() {
        }

        public static int getCurrentAddr(){
            return Scope.getCurrentAddr();
        }

        public static void setCurrentAddr(int currentAddr){
            Scope.setCurrentAddr(currentAddr);
        }

        public void addScope() {
            Scope s = null;
            if(currentScope.isEmpty()){
                s =  new Scope(null);
            }else{
                s =  new Scope(currentScope.peek());
            }
            currentScope.add(s);
        }

        public void deleteScope() {
            currentScope.pop();
        }

        public int addVariable(String input) throws ParseException {
            return currentScope.peek().makeAddr(input);
        }

        public int findVariable(String input) throws ParseException {
            return currentScope.peek().findAddr(input);
        }
    }

    static class Scope {

        private static int currentAddr;
        private Scope parent;
        private Hashtable<String, Integer> vars = new Hashtable<String, Integer>();

        static {
            currentAddr = 0;
        }

        public Scope(Scope parent) {
            this.parent = parent;
        }

        public int findAddr(String input) throws ParseException {

            Scope t = this;
            while (t != null) {
                if (t.getVars().containsKey(input)) {
                    return t.getVars().get(input);
                }
                t = t.getParent();
            }

            throw new ParseException("Unknown variable '" + input
                    + "'.define it first.");
        }

        public int makeAddr(String input) throws ParseException {

            Scope t = this;
            while (t != null) {
                if (t.getVars().containsKey(input)) {
                    throw new ParseException("Variable '" + input
                            + "' has already been defined.");
                }
                t = t.getParent();
            }

            vars.put(input, currentAddr);

            int temp = currentAddr;
            // 2 bytes for every variable
            currentAddr += 2;

            return temp;
        }

        public static int getCurrentAddr() {
            return currentAddr;
        }

        public static void setCurrentAddr(int currentAddr) {
            Scope.currentAddr = currentAddr;
        }

        public Scope getParent() {
            return parent;
        }

        public void setParent(Scope parent) {
            this.parent = parent;
        }

        public Hashtable<String, Integer> getVars() {
            return vars;
        }

        public void setVars(Hashtable<String, Integer> vars) {
            this.vars = vars;
        }

    }

    private static void callFunction(String input) throws ParseException {
        if(!functions.containsKey(input))
        {
            throw new ParseException("Fonction inconnue '" + input
                + "'.Veuillez la d\u00c3\u00a9finir d'abord.");
        }
    }

    public static ArrayList<GenQuad> getPB() {
        return PB;
    }

    public static Hashtable<String, String> getStrings() {
        return strings;
    }

    private static int getTemp() {
        int temp = currentScope.peek().getCurrentAddr();
        currentScope.peek().setCurrentAddr(temp + 2);
        return temp;
    }

    private static String getAddr(Object s, String first) {
        String output = getAddr(s);
        if (output.startsWith("BASE + ")) {
            return first + output;
        }
        return output;
    }

    private static String getAddr(Object s) {

        if (s instanceof Integer) {
            s = (Integer) s;

            return ("BASE + " + s.toString());
        }

        return ((String) s).substring(1);
    }

    public static int toInt(Object obj)
    {
        if(obj instanceof Number) {
             return ((Number) obj).intValue();
        }
        String s = obj.toString();
        char[] mysChars = s.toCharArray();
        if(mysChars[0]=='#') {mysChars[0]='0';}
        s = String.valueOf(mysChars);
        return Integer.parseInt(s);
    }

    private static void compare(String input) {
        int jp3 = (Integer) ss.pop();
        int jp4 = (Integer) ss.pop();
        int jp10 = (Integer) ss.pop();
        int jp11;

        switch (input) {
            case "==":

                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("jne", "ETQ" + currentFunction + (quadC), null));
                break;
            case "!=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("je", "ETQ" + currentFunction + (quadC), null));
                break;
            case "<":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("jge", "ETQ" + currentFunction + (quadC), null));
                break;
            case ">":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("jle", "ETQ" + currentFunction + (quadC), null));
                break;
            case ">=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("jl", "ETQ" + currentFunction + (quadC), null));
                break;
            case "<=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new GenQuad("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new GenQuad("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new GenQuad("cmp", "AX", "BX"));
                PB.set(jp3, new GenQuad("jg", "ETQ" + currentFunction + (quadC), null));
                break;
        }

    }

    private static void codeGen(String action, String input, String type, String args ) throws ParseException{

        switch (action) {

            case "#createFunction":
                defineFunction(input);
                break;
            case "#callFunction":
                callFunction(input);
                PB.add(new GenQuad("CALL", input,null ));
                quadC++;
                break;
            case "#startScopeLevel":
                currentScope.push(new ScopeLevel());
                break;
            case "#endScopeLevel":
                currentScope.pop();
                break;
            case "#scopeStart":
                currentScope.peek().addScope();
                break;
            case "#scopeEnd":
                currentScope.peek().deleteScope();
                break;
            case "#const":
                ss.push("#" + input);
                break;
            case "#variableDef":
                int a = currentScope.peek().addVariable(input);
                ss.push(a);
                break;
            case "#pid":
                int p = currentScope.peek().findVariable(input);
                ss.push(p);
                break;
            case "#add":
                int t = getTemp();
                PB.add(new GenQuad("mov", "CX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("add", "CX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("mov", getAddr(t), "CX"));
                quadC++;

                ss.push(t);
                break;
            case "#mines":
                int t1 = getTemp();
                String str2 = getAddr(ss.pop());
                PB.add(new GenQuad("mov", "CX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("sub", "CX", str2));
                quadC++;
                PB.add(new GenQuad("mov", getAddr(t1), "CX"));
                quadC++;
                ss.push(t1);
                break;
            case "#mul":
                int t2 = getTemp();
                PB.add(new GenQuad("mov", "CX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("mov", "AL", getAddr(ss.pop(), "BYTE PTR ")));
                quadC++;
                PB.add(new GenQuad("mul", "CL", null));
                quadC++;
                PB.add(new GenQuad("mov", getAddr(t2), "AX"));
                quadC++;
                ss.push(t2);
                break;
            case "#div":
                int t3 = getTemp();
                String pa2 = getAddr(ss.pop(), "BYTE PTR ");
                PB.add(new GenQuad("mov", "AX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("mov", "CL", pa2));
                quadC++;
                PB.add(new GenQuad("div", "CL", null));
                quadC++;
                PB.add(new GenQuad("mov", getAddr(t3, "BYTE PTR "), "AL"));
                quadC++;
                ss.push(t3);
                break;
            case "#assign":
                PB.add(new GenQuad("mov", "AX", getAddr(ss.pop())));
                quadC++;
                PB.add(new GenQuad("mov", getAddr(ss.pop()), "AX"));
                quadC++;
                break;
            case "#label":
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                ss.push(quadC);
                quadC++;
                break;
            case "#save":
                PB.add(new GenQuad("save", null, null));
                ss.push(quadC);
                quadC++;
                break;
            case "#save_pointer":
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                ss.push(quadC);
                quadC++;
                break;
            case "#while":
                compare(input);
                PB.add(new GenQuad("jmp", "ETQ" + currentFunction + ss.pop(), null));
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                quadC++;
                quadC++;
                break;
            case "#jpf_save":
                compare(input);

                PB.add(new GenQuad("save", null, null));
                ss.push(quadC);

                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                quadC++;
                quadC++;
                break;
            case "#jp":
                PB.set(toInt(ss.pop()), new GenQuad("jmp", "ETQ" + currentFunction + quadC, null));
                break;
            case "#jpf":
                compare(input);

                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                quadC++;
                break;
            case "#jp_statement":
                PB.add(new GenQuad("jmp", null, null));
                ss.push(quadC);
                quadC++;
                break;
            case "#for_jp_statement":
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                ss.push(quadC);
                quadC++;
                break;
            case "#for":
                int jp_statement = toInt(ss.pop());
                int jp_condition = toInt(ss.pop());
                int step_pointer = toInt(ss.pop());
                int jp_after_condition = toInt(ss.pop());

                if(!input.equals("nothing"))
                {
                    compare(input);
                }

                int befor_condition = toInt(ss.pop());

                PB.set(jp_condition, new GenQuad("jmp", "ETQ" + currentFunction + befor_condition, null));
                PB.set(jp_after_condition, new GenQuad("jmp", "ETQ" + currentFunction + jp_statement, null));

                PB.add(new GenQuad("jmp", "ETQ" + currentFunction + step_pointer, null));
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ":", null, null));
                quadC++;
                quadC++;
                break;
            case "#end":
                PB.add(new GenQuad("ETQ" + currentFunction + quadC + ": ", null, null));
                quadC++;
                int k = 0;
                System.out.println("==================== Code g\u00c3\u00a9n\u00c3\u00a9r\u00c3\u00a9 ====================");
                StringBuilder sb = new StringBuilder();
                for (GenQuad c : PB)
                {
                    sb.append(k+" :\t");
                    sb.append(c.toString());
                    sb.append("\n");
                    k++;
                }
                System.out.println(sb);
                System.out.println("======================================================");
                break;
        }

    }

    static void preStack(pair p) throws ParseException
    {
          String part1 = p.part1;
          switch(part1)
          {
                case "#add":
                        case "#mines":
                        case "#div":
                        case "#mul":
                                while(!expStack.isEmpty() && precedence(expStack.peek().part1) >= precedence(part1))
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2, "", "");
                                }
                                expStack.push(p);
                                break;
                        case "#OP":
                                expStack.push(p);
                                break;
                        case "#CP":
                                while(!expStack.peek().part1.equals("#OP") )
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2, "", "");
                                }
                                expStack.pop();
                        case "#finish":
                                while(!expStack.isEmpty())
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2, "", "");
                                }
                        case "#pid":
                        case "#const":
                                codeGen(p.part1,p.part2, "", "");
                                break;
          }
    }

    static int precedence(String opt)
    {
        switch(opt)
        {
            case "#add":
            case "#mines":
                return 1;
            case "#div":
            case "#mul":
                return 2;
            default:
                return 0;
        }
    }
    static class pair
    {
        public static String part1 , part2;

        public pair(String part1,String part2)
        {
            this.part1 = part1;
            this.part2 = part2;
        }

    }






    public static void main(String args []) throws ParseException
    {

    miniC parser = new miniC(System.in);
    while (true)
    {
      System.out.println("\nUtilisation de la ligne de commande ...");

      try
      {
        System.out.println("Veuillez entrer votre code ...");
        miniC.Start();
      }
      catch (Exception e)
      {
        System.out.println("Erreur syntaxique.");
        System.out.println(e.getMessage());
        miniC.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Erreur.");
        System.out.println(e.getMessage());
        break;
      }

    }
  }

  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Function();
    }
    jj_consume_token(0);
  }

  static final public void ArgList() throws ParseException {
    Arg();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRGULE);
      Arg();
    }
  }

  static final public void Arg() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(ID);
  }

  static final public void Function() throws ParseException {
 Token id;
      codeGen( "#startScopeLevel" , "", "", "");
    jj_consume_token(TYPE);
    id = jj_consume_token(ID);
    jj_consume_token(GPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      ArgList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(DPAR);
                                                 codeGen( "#createFunction", id.image, "", "" );
    StatementBlockDef();
      codeGen( "#end" , "", "", "");
      codeGen( "#endScopeLevel" , "", "", "");
  }

  static final public void varList() throws ParseException {
Token id;
    id = jj_consume_token(ID);
                 codeGen( "#variableDef" , id.image, "", "" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECT:
      jj_consume_token(AFFECT);
      ExprAssign();
                              preStack(new pair( "#finish" , "" ));
                                                                      codeGen( "#assign" , "", "", "" );
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void varDefineDef() throws ParseException {
  Token id;
    jj_consume_token(TYPE);
    id = jj_consume_token(ID);
                             codeGen( "#variableDef" , id.image, "", "" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECT:
      jj_consume_token(AFFECT);
      ExprAssign();
                             preStack(new pair( "#finish" , "" ));
                                                                     codeGen( "#assign" , "", "", "" );
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULE);
      varList();
    }
  }

  static final public void StatementBlockDef() throws ParseException {
    jj_consume_token(GACC);
             codeGen( "#scopeStart" , "", "", "");
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case IF:
      case WHILE:
      case FOR:
      case ID:
      case NUMBER:
      case GPAR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Stmt();
    }
                                                                  codeGen( "#scopeEnd" , "", "", "");
    jj_consume_token(DACC);
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      varDefineDef();
      jj_consume_token(POINTVIRGULE);
      break;
    case ID:
    case NUMBER:
    case GPAR:
      Expr();
      jj_consume_token(POINTVIRGULE);
      break;
    case IF:
      IfStmt();
      break;
    case FOR:
      ForStmt();
      break;
    case WHILE:
      WhileStmt();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IfStmt() throws ParseException {
  Token op;
    jj_consume_token(IF);
    jj_consume_token(GPAR);
    ExprAssign();
    op = Rvalue();
    jj_consume_token(DPAR);
    StatementBlockDef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
                   codeGen( "#jpf_save" , op.image, "", "" );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GACC:
        StatementBlockDef();
        break;
      case TYPE:
      case IF:
      case WHILE:
      case FOR:
      case ID:
      case NUMBER:
      case GPAR:
        Stmt();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                    codeGen( "#jp" , "", "", "" );
      break;
    default:
      jj_la1[9] = jj_gen;
          codeGen( "#jpf" , op.image, "", "" );
    }
  }

  static final public void Expr() throws ParseException {
    ExprAssign();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECT:
    case EQ:
    case LT:
    case LTE:
    case GT:
    case GTE:
    case NEQ:
      Affec();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void ExprAssign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
             Token id1;
        id1 = jj_consume_token(ID);
                                        preStack(new pair( "#pid" , id1.image ));
        break;
      case NUMBER:
                                                                                       Token id3;
        id3 = jj_consume_token(NUMBER);
                                                                                                                      preStack(new pair( "#const" , id3.image ));
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
      case MUL:
      case DIV:
                  String op;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          jj_consume_token(ADD);
                                  preStack(new pair( "#add" , "" ));
          break;
        case SUB:
          jj_consume_token(SUB);
                                  preStack(new pair( "#mines" , "" ));
          break;
        case MUL:
          jj_consume_token(MUL);
                                  preStack(new pair( "#mul" , "" ));
          break;
        case DIV:
          jj_consume_token(DIV);
                                  preStack(new pair( "#div" , "" ));
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExprAssign();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case GPAR:
      jj_consume_token(GPAR);
      ExprAssign();
      jj_consume_token(DPAR);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Affec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECT:
      jj_consume_token(AFFECT);
      ExprAssign();
                         preStack(new pair( "#finish" , "" ));
                                                                 codeGen( "#assign" , "", "", "" );
      break;
    case EQ:
    case LT:
    case LTE:
    case GT:
    case GTE:
    case NEQ:
      Rvalue();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token Rvalue() throws ParseException {
 Token op = null;
         preStack(new pair( "#finish" , "" ));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      op = jj_consume_token(LT);
      break;
    case GT:
      op = jj_consume_token(GT);
      break;
    case EQ:
      op = jj_consume_token(EQ);
      break;
    case NEQ:
      op = jj_consume_token(NEQ);
      break;
    case GTE:
      op = jj_consume_token(GTE);
      break;
    case LTE:
      op = jj_consume_token(LTE);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ExprAssign();
                                                                                                                                            preStack(new pair( "#finish" , "" ));
                                                                                                                                                                                     codeGen( "#save" , "", "", "" );codeGen( "#save" , "", "", "" );codeGen( "#save" , "", "", "" );codeGen( "#save" , "", "", "" );
         {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public void WhileStmt() throws ParseException {
 Token op;
    jj_consume_token(WHILE);
    jj_consume_token(GPAR);
                     codeGen( "#save_pointer" , "", "", "" );
    ExprAssign();
    op = Rvalue();
    jj_consume_token(DPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GACC:
      StatementBlockDef();
      break;
    case TYPE:
    case IF:
    case WHILE:
    case FOR:
    case ID:
    case NUMBER:
    case GPAR:
      Stmt();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                                   codeGen( "#while" , op.image, "", "" );
  }

  static final public void ForStmt() throws ParseException {
 Token op = null;
    jj_consume_token(FOR);
    jj_consume_token(GPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case ID:
    case NUMBER:
    case GPAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        varDefineDef();
        break;
      case ID:
      case NUMBER:
      case GPAR:
        ExprAssign();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(POINTVIRGULE);
                                                            codeGen( "#save_pointer" , "", "", "" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NUMBER:
    case GPAR:
      ExprAssign();
      op = Rvalue();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                                                                                                                                         codeGen( "#save" , "", "", "" );
    jj_consume_token(POINTVIRGULE);
                                                                                                                                                                                              codeGen( "#save_pointer" , "", "", "" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
                                                                                                                                                                                                                                              Token id;
      id = jj_consume_token(ID);
                                                                                                                                                                                                                                                                       codeGen( "#pid" , id.image, "", "" );
      jj_consume_token(AFFECT);
      ExprAssign();
                                                                                                                                                                                                                                                                                                                                     preStack(new pair( "#finish" , "" ));
                                                                                                                                                                                                                                                                                                                                                                              codeGen( "#assign" , "", "", "" );
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                                                                                                                                                                        codeGen( "#save" , "", "", "" );
    jj_consume_token(DPAR);
                  codeGen( "#for_jp_statement" , "", "", "" );
    StatementBlockDef();
              if(op != null)codeGen( "#for" , op.image, "", "" );else codeGen( "#for" , "nothing", "", "" );
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public miniCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x200000,0x80,0x2000000,0x2000000,0x200000,0x8f180,0x8f180,0x48f180,0x200,0xfe000000,0xc000,0x0,0x0,0x8c000,0xfe000000,0xfc000000,0x48f180,0x8c080,0x8c080,0x8c000,0x4000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public miniC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public miniC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new miniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public miniC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new miniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public miniC(miniCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(miniCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
